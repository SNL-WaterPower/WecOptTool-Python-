{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 2 - WaveBot Optimization\n",
    "The goal of this tutorial is to show a simple example of using both outer and inner optimization loops in WecOptTool. \n",
    "Like the first tutorial, it uses the WaveBot WEC in one degree of freedom in regular waves. \n",
    "The goal is to **find the optimal keel radius** (`r2`) that maximizes the average absorbed power, while maintaining a constant volume. \n",
    "A constant volume is achieved by setting the height of the conical section (`h2`) in conjunction with the keel radius (`r2`).\n",
    "\n",
    "This example demonstrates a complete case of the types of optimization studies WecOptTool is meant for. \n",
    "The main optimization (outer optimization loop) is to find the optimal geometry (radius `r2`), and for each geometry considered the optimal PTO force (inner optimization loop) will be found.\n",
    "The inner loop was showcased in *Tutorial 1* and uses a gradient-based optimization method, with the gradients obtained with automatic differentiation. \n",
    "The outer loop optimization is for the user to setup. \n",
    "Note however that automatic differentiation is not an option due to the presence of the inner optimization loop. \n",
    "In this example, we will do a simple *brute force* optimization using `scipy.optimize.brute`.  \n",
    "\n",
    "![Device Diagram](https://live.staticflickr.com/65535/51751577441_515afec334_z.jpg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import logging\n",
    "from datetime import datetime\n",
    "\n",
    "import autograd.numpy as np\n",
    "from autograd.builtins import isinstance, tuple, list, dict\n",
    "import capytaine as cpy\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import brute\n",
    "\n",
    "import wecopttool as wot\n",
    "\n",
    "\n",
    "logging.basicConfig(level=logging.ERROR)\n",
    "\n",
    "results_super_dir = 'results_tutorial_2'\n",
    "if not os.path.exists(results_super_dir):\n",
    "    os.makedirs(results_super_dir)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem setup\n",
    "First, we define a function for `h2` based on `r1` that maintains a constant volume. \n",
    "We see that, as expected, smaller values of `r2` require larger values of `h2` in order to maintain a constant hull volume."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "r1 = 0.88\n",
    "r2_0 = 0.35\n",
    "h2_0 = 0.37\n",
    "V0 = 1/3*np.pi*h2_0*(r1**2+r2_0**2+(r1*r2_0))\n",
    "\n",
    "r2_vals = np.linspace(0.05, 0.88*0.999, 8, endpoint=True)\n",
    "\n",
    "\n",
    "def h2_from_r2(r2, V=V0, r1=r1):\n",
    "    h2 = V/(1/3*np.pi*(r1**2+r2**2+(r1*r2)))\n",
    "    return h2\n",
    "\n",
    "\n",
    "# plot\n",
    "mapres = map(h2_from_r2, r2_vals)\n",
    "h2_vals = list(mapres)\n",
    "\n",
    "fig1, ax1 = plt.subplots(figsize=(8,5))\n",
    "for r2, h2 in zip(r2_vals.tolist(), h2_vals):\n",
    "    _ = wot.geom.WaveBot(r2=r2, h2=h2, freeboard=0.2).plot_cross_section(\n",
    "        ax=ax1, label=f\"r2={r2:.2f}, h2={h2:.2f}\")\n",
    "ax1.legend(loc='best', fontsize='small',ncol=2)\n",
    "_ = ax1.set_title('WaveBot hull cross-sections')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will define an objective function for our design optimization problem. We use the same workflow illustrated in Tutorial 1 to set up a WaveBot device and solve for the optimal solution, but wrap this in a function definition which can set `r2` and (indirectly) `h2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def design_obj_fun(x):\n",
    "    r2 = x[0]\n",
    "    print(f\"\\nr2 = {r2:.2f}:\")\n",
    "    start_time = datetime.now()\n",
    "    \n",
    "    ## WEC ##\n",
    "    # geometry\n",
    "    h2 = h2_from_r2(r2)\n",
    "\n",
    "    # mesh\n",
    "    wb = wot.geom.WaveBot(r2=r2, h2=h2)\n",
    "    mesh = wb.mesh(mesh_size_factor=0.5)\n",
    "\n",
    "    # capytaine floating body (mesh + DOFs)\n",
    "    fb = cpy.FloatingBody.from_meshio(mesh, name=\"WaveBot\")\n",
    "    fb.add_translation_dof(name=\"HEAVE\")\n",
    "\n",
    "    # mass & hydrostatic stiffness\n",
    "    hs_data = wot.hydrostatics.hydrostatics(fb)\n",
    "    mass_33 = wot.hydrostatics.mass_matrix_constant_density(hs_data)[2, 2]\n",
    "    mass = np.atleast_2d(mass_33)\n",
    "    stiffness_33 = wot.hydrostatics.stiffness_matrix(hs_data)[2, 2]\n",
    "    stiffness = np.atleast_2d(stiffness_33)\n",
    "\n",
    "    # frequencies\n",
    "    f0 = 0.05\n",
    "    nfreq = 50\n",
    "\n",
    "    # PTOs (additional force + constraint + objective function)\n",
    "    kinematics = np.eye(fb.nb_dofs)\n",
    "    pto = wot.pto.PseudoSpectralPTO(nfreq, kinematics)\n",
    "\n",
    "    # constraints at 4x points\n",
    "    nsubsteps = 4\n",
    "    f_max = 2000.0\n",
    "\n",
    "    def const_f_pto(wec, x_wec, x_opt):\n",
    "        f = pto.force_on_wec(wec, x_wec, x_opt, nsubsteps)\n",
    "        return f_max - np.abs(f.flatten())\n",
    "\n",
    "    ineq_cons = {'type': 'ineq',\n",
    "                 'fun': const_f_pto,\n",
    "                 }\n",
    "    constraints = [ineq_cons]\n",
    "\n",
    "    # additional friction\n",
    "    dissipation = 160.3\n",
    "\n",
    "    # create WECs\n",
    "    f_added = {'PTO force': pto.force_on_wec}\n",
    "\n",
    "    my_wec = wot.WEC(fb, mass, stiffness, f0, nfreq, f_add=f_added,\n",
    "                     constraints=constraints, dissipation=dissipation)\n",
    "\n",
    "    # create save directory\n",
    "    results_dir = os.path.join(results_super_dir, f\"{r2:.2f}\")\n",
    "    if not os.path.exists(results_dir):\n",
    "      os.makedirs(results_dir)\n",
    "\n",
    "    # read BEM if available, else run & save\n",
    "    fname = os.path.join(results_dir, 'bem.nc')\n",
    "    if os.path.exists(fname):\n",
    "        my_wec.read_bem(fname)\n",
    "    else:\n",
    "        my_wec.run_bem()\n",
    "        my_wec.write_bem(fname)\n",
    "        mesh.write(os.path.join(results_dir, f\"{r2:.2f}.stl\"))\n",
    "\n",
    "    ## WAVE ##\n",
    "    wfreq = 0.6\n",
    "    amplitude = 0.0625\n",
    "    phase = 30\n",
    "    waves = wot.waves.regular_wave(f0, nfreq, wfreq, amplitude, phase)\n",
    "\n",
    "    ## OBJECTIVE FUNCTION ##\n",
    "    obj_fun = pto.average_power\n",
    "    nstate_opt = pto.nstate\n",
    "\n",
    "    ## SOLVE ##\n",
    "    scale_x_wec = 1e4\n",
    "    scale_x_opt = 1\n",
    "    scale_obj = 1e-1\n",
    "    options = {'maxiter': 1000, 'ftol': 1e-8}\n",
    "    \n",
    "\n",
    "    _, _, _, _, avg_power, _ = my_wec.solve(\n",
    "        waves, obj_fun, nstate_opt, optim_options=options, \n",
    "        scale_x_opt=scale_x_opt, scale_x_wec=scale_x_wec, scale_obj=scale_obj)\n",
    "\n",
    "    print(f'time (hh:mm:ss): {datetime.now()-start_time}')\n",
    "\n",
    "    return avg_power\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solve\n",
    "Finally, we may call this objective function with an optimization algorithm. \n",
    "Here, a simple *brute force* optimization approach is used for illustrative purposes, but any variety of options could be applied. \n",
    "The optimization algorithm will call our objective function, which in turn will create a new WaveBot hull, run the necessary BEM calculations for the hull, and find the PTO force that provides the most absorbed power for that hull. \n",
    "This process will be conducted for the range of `r2` values that we specify."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "r2 = 0.05:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.59434693868806\n",
      "            Iterations: 249\n",
      "            Function evaluations: 250\n",
      "            Gradient evaluations: 249\n",
      "time (hh:mm:ss): 0:00:56.504196\n",
      "\n",
      "r2 = 0.17:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.5874437451222592\n",
      "            Iterations: 242\n",
      "            Function evaluations: 243\n",
      "            Gradient evaluations: 242\n",
      "time (hh:mm:ss): 0:00:43.864276\n",
      "\n",
      "r2 = 0.29:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.588838078451528\n",
      "            Iterations: 287\n",
      "            Function evaluations: 287\n",
      "            Gradient evaluations: 287\n",
      "time (hh:mm:ss): 0:00:50.546586\n",
      "\n",
      "r2 = 0.41:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.5858250483225236\n",
      "            Iterations: 289\n",
      "            Function evaluations: 290\n",
      "            Gradient evaluations: 289\n",
      "time (hh:mm:ss): 0:00:50.118314\n",
      "\n",
      "r2 = 0.52:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.5844800999604223\n",
      "            Iterations: 305\n",
      "            Function evaluations: 305\n",
      "            Gradient evaluations: 305\n",
      "time (hh:mm:ss): 0:01:21.321850\n",
      "\n",
      "r2 = 0.64:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.580629280042157\n",
      "            Iterations: 296\n",
      "            Function evaluations: 296\n",
      "            Gradient evaluations: 296\n",
      "time (hh:mm:ss): 0:00:54.203431\n",
      "\n",
      "r2 = 0.76:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.5727779934809472\n",
      "            Iterations: 242\n",
      "            Function evaluations: 243\n",
      "            Gradient evaluations: 242\n",
      "time (hh:mm:ss): 0:00:43.378723\n",
      "\n",
      "r2 = 0.88:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -1.5516445478608083\n",
      "            Iterations: 215\n",
      "            Function evaluations: 215\n",
      "            Gradient evaluations: 215\n",
      "time (hh:mm:ss): 0:00:42.934866\n"
     ]
    }
   ],
   "source": [
    "# range over which to search\n",
    "ranges = (slice(r2_vals[0], r2_vals[-1]+np.diff(r2_vals)[0], np.diff(r2_vals)[0]),)\n",
    "\n",
    "# solve\n",
    "res = brute(func=design_obj_fun, ranges=ranges, full_output=True,  finish=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "From a quick plot of the results, we see that the power absorption (where negative power is power absorbed by the device) generally improves for smaller values of `r2`.\n",
    "It is also clear that when the WEC is cylindrical (where `r2=0.88`), power absorption is reduced."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig2, ax2 = plt.subplots()\n",
    "colors = plt.rcParams['axes.prop_cycle'].by_key()['color'][:len(res[2])]\n",
    "\n",
    "ax2.plot(res[2], res[3], 'k', zorder=0)\n",
    "ax2.scatter(res[2], res[3], c=colors, zorder=1)\n",
    "\n",
    "ax2.set_xlabel('Keel radius, $r_2$ [m]')\n",
    "ax2.set_ylabel('Average Power [W]')\n",
    "ax2.set_title('Design optimization results')\n",
    "fig2.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "52432d6ee3f19a0e95d153c6ef95316a5902a04bd0ac4e408b2228923a5e25ec"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
