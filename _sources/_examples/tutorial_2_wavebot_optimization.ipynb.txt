{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 2 - WaveBot Optimization\n",
    "The goal of this tutorial is to show a simple example of using both outer and inner optimization loops in WecOptTool. \n",
    "Like the first tutorial, it uses the WaveBot WEC in one degree of freedom in regular waves. \n",
    "The goal is to **find the optimal keel radius** (`r2`) that maximizes the average aborbed power, while maintaining a constant volume. \n",
    "A constant volume is acheived by setting the height of the conical section (`h2`) in conjunction with the keel radius (`r2`).\n",
    "\n",
    "This example demonstrates a complete case of the types of optimization studies WecOptTool is meant for. \n",
    "The main optimization (outer optimization loop) is to find the optimal geomtery (radius `r2`), and for each geometry considered the optimal PTO force (inner optimization loop) will be found.\n",
    "The inner loop was showcased in *Tutorial 1* and uses a gradient-based optimization method, with the gradients obtained with automatic differentiation. \n",
    "The outer loop optimization is for the user to setup. \n",
    "Note however that automatic differentiation is not an option due to the presence of the inner optimization loop. \n",
    "In this example, we will do a simple *brute force* optimization using `scipy.optimize.brute`.  \n",
    "\n",
    "![Device Diagram](https://live.staticflickr.com/65535/51751577441_515afec334_z.jpg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import logging\n",
    "from datetime import datetime\n",
    "\n",
    "import autograd.numpy as np\n",
    "from autograd.builtins import isinstance, tuple, list, dict\n",
    "import capytaine as cpy\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import brute\n",
    "\n",
    "import wecopttool as wot\n",
    "\n",
    "\n",
    "logging.basicConfig(level=logging.ERROR)\n",
    "\n",
    "results_super_dir = 'results_tutorial_2'\n",
    "if not os.path.exists(results_super_dir):\n",
    "    os.makedirs(results_super_dir)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem setup\n",
    "First, we define a function for `h2` based on `r1` that maintains a constant volume. \n",
    "We see that, as expected, smaller values of `r2` require larger values of `h2` in order to maintain a constant hull volume."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "r1 = 0.88\n",
    "r2_0 = 0.35\n",
    "h2_0 = 0.37\n",
    "V0 = 1/3*np.pi*h2_0*(r1**2+r2_0**2+(r1*r2_0))\n",
    "\n",
    "r2_vals = np.concatenate([np.arange(0.0, r1, 0.1), [r1]])\n",
    "\n",
    "\n",
    "def h2_from_r2(r2, V=V0, r1=r1):\n",
    "    h2 = V/(1/3*np.pi*(r1**2+r2**2+(r1*r2)))\n",
    "    return h2\n",
    "\n",
    "\n",
    "# plot\n",
    "mapres = map(h2_from_r2, r2_vals)\n",
    "h2_vals = list(mapres)\n",
    "\n",
    "fig1, ax1 = plt.subplots(figsize=(8,5))\n",
    "for r2, h2 in zip(r2_vals.tolist(), h2_vals):\n",
    "    _ = wot.geom.WaveBot(r2=r2, h2=h2).plot_cross_section(\n",
    "        ax=ax1, label=f\"r2={r2:.2f}, h2={h2:.2f}\")\n",
    "ax1.legend(loc='best', fontsize='small',ncol=2)\n",
    "_ = ax1.set_title('WaveBot hull cross-sections')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will define an objective function for our design optimization problem. We use the same workflow illustrated in Tutorial 1 to set up a WaveBot device, but wrap this in a function definition which can set `r2` and (indirectly) `h2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def design_obj_fun(x):\n",
    "    print(f\"\\nr2 = {x[0]}:\")\n",
    "    start_time = datetime.now()\n",
    "    \n",
    "    ## WEC ##\n",
    "    # geometry\n",
    "    r2 = x[0]\n",
    "    h2 = h2_from_r2(r2)\n",
    "\n",
    "    # mesh\n",
    "    wb = wot.geom.WaveBot(r2=r2, h2=h2)\n",
    "    mesh = wb.mesh(mesh_size_factor=0.5)\n",
    "\n",
    "    # capytaine floating body (mesh + DOFs)\n",
    "    fb = cpy.FloatingBody.from_meshio(mesh, name=\"WaveBot\")\n",
    "    fb.add_translation_dof(name=\"HEAVE\")\n",
    "\n",
    "    # mass & hydrostatic stiffness\n",
    "    hs_data = wot.hydrostatics.hydrostatics(fb)\n",
    "    mass_33 = wot.hydrostatics.mass_matrix_constant_density(hs_data)[2, 2]\n",
    "    mass = np.atleast_2d(mass_33)\n",
    "    stiffness_33 = wot.hydrostatics.stiffness_matrix(hs_data)[2, 2]\n",
    "    stiffness = np.atleast_2d(stiffness_33)\n",
    "\n",
    "    # frequencies\n",
    "    f0 = 0.05\n",
    "    nfreq = 50\n",
    "\n",
    "    # PTOs (additional force + constraint + objective function)\n",
    "    kinematics = np.eye(fb.nb_dofs)\n",
    "    pto = wot.pto.PseudoSpectralPTO(nfreq, kinematics)\n",
    "\n",
    "    # constraints at 4x points\n",
    "    nsubsteps = 4\n",
    "    f_max = 2000.0\n",
    "\n",
    "    def const_f_pto(wec, x_wec, x_opt):\n",
    "        f = pto.force_on_wec(wec, x_wec, x_opt, nsubsteps)\n",
    "        return f_max - np.abs(f.flatten())\n",
    "\n",
    "    ineq_cons = {'type': 'ineq',\n",
    "                 'fun': const_f_pto,\n",
    "                 }\n",
    "    constraints = [ineq_cons]\n",
    "\n",
    "    # additional friction\n",
    "    dissipation = 160.3\n",
    "\n",
    "    # create WECs\n",
    "    f_added = pto.force_on_wec\n",
    "\n",
    "    my_wec = wot.WEC(fb, mass, stiffness, f0, nfreq, f_add=f_added,\n",
    "                     constraints=constraints, dissipation=dissipation)\n",
    "\n",
    "    # create save directory\n",
    "    results_dir = os.path.join(results_super_dir, f\"{x[0]:.2f}\")\n",
    "    if not os.path.exists(results_dir):\n",
    "      os.makedirs(results_dir)\n",
    "\n",
    "    # read BEM if available, else run & save\n",
    "    fname = os.path.join(results_dir, 'bem.nc')\n",
    "    if os.path.exists(fname):\n",
    "        my_wec.read_bem(fname)\n",
    "    else:\n",
    "        my_wec.run_bem()\n",
    "        my_wec.write_bem(fname)\n",
    "        mesh.write(os.path.join(results_dir, f\"{x[0]:.2f}.stl\"))\n",
    "\n",
    "    ## WAVE ##\n",
    "    wfreq = 0.6\n",
    "    amplitude = 0.0625\n",
    "    phase = -40\n",
    "    waves = wot.waves.regular_wave(f0, nfreq, wfreq, amplitude, phase)\n",
    "\n",
    "    ## OBJECTIVE FUNCTION ##\n",
    "    obj_fun = pto.average_power\n",
    "    nstate_opt = pto.nstate\n",
    "\n",
    "    ## SOLVE ##\n",
    "    scale_x_opt = 0.01\n",
    "    options = {'maxiter': 1000, 'ftol': 1e-8}\n",
    "    \n",
    "\n",
    "    _, _, _, _, avg_power, _ = my_wec.solve(\n",
    "        waves, obj_fun, nstate_opt, optim_options=options, \n",
    "        scale_x_opt=scale_x_opt)\n",
    "\n",
    "    print(f'time (hh:mm:ss): {datetime.now()-start_time}')\n",
    "\n",
    "    return avg_power\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solve\n",
    "Finally, we may call this objective function with an optimization algorithm. \n",
    "Here, a simple *brute force* optimization approach is used for illustrative purposes, but any variety of options could be applied. \n",
    "The optimization algorithm will call our objective function, which in turn will create a new WaveBot hull, run the necessary BEM calculations for the hull, and find the PTO force that provides the most absorbed power for that hull. \n",
    "This process will be conducted for the range of `r2` values that we specify."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "r2 = 0.0:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.947138894176044\n",
      "            Iterations: 186\n",
      "            Function evaluations: 192\n",
      "            Gradient evaluations: 186\n",
      "time (hh:mm:ss): 0:00:42.533285\n",
      "\n",
      "r2 = 0.1:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -16.00762799797489\n",
      "            Iterations: 195\n",
      "            Function evaluations: 203\n",
      "            Gradient evaluations: 195\n",
      "time (hh:mm:ss): 0:00:45.508277\n",
      "\n",
      "r2 = 0.2:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.958391310115555\n",
      "            Iterations: 194\n",
      "            Function evaluations: 201\n",
      "            Gradient evaluations: 194\n",
      "time (hh:mm:ss): 0:00:40.635843\n",
      "\n",
      "r2 = 0.30000000000000004:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.92397695677865\n",
      "            Iterations: 196\n",
      "            Function evaluations: 202\n",
      "            Gradient evaluations: 196\n",
      "time (hh:mm:ss): 0:00:42.352057\n",
      "\n",
      "r2 = 0.4:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.911066496288848\n",
      "            Iterations: 180\n",
      "            Function evaluations: 186\n",
      "            Gradient evaluations: 180\n",
      "time (hh:mm:ss): 0:00:50.660561\n",
      "\n",
      "r2 = 0.5:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.886466459091583\n",
      "            Iterations: 180\n",
      "            Function evaluations: 187\n",
      "            Gradient evaluations: 180\n",
      "time (hh:mm:ss): 0:01:00.046873\n",
      "\n",
      "r2 = 0.6000000000000001:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.842136485885046\n",
      "            Iterations: 193\n",
      "            Function evaluations: 200\n",
      "            Gradient evaluations: 193\n",
      "time (hh:mm:ss): 0:00:48.030269\n",
      "\n",
      "r2 = 0.7000000000000001:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.842882429659761\n",
      "            Iterations: 193\n",
      "            Function evaluations: 201\n",
      "            Gradient evaluations: 193\n",
      "time (hh:mm:ss): 0:00:48.767861\n",
      "\n",
      "r2 = 0.8:\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: -15.761207099289132\n",
      "            Iterations: 200\n",
      "            Function evaluations: 206\n",
      "            Gradient evaluations: 200\n",
      "time (hh:mm:ss): 0:00:52.184659\n"
     ]
    }
   ],
   "source": [
    "# range over which to search\n",
    "ranges = (slice(r2_vals[0], r2_vals[-1], np.diff(r2_vals)[0]),)\n",
    "\n",
    "# solve\n",
    "res = brute(func=design_obj_fun, ranges=ranges, full_output=True,  finish=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "From a quick plot of the results, we see that the power absorption (where negative power is power absorbed by the device) generally improves for smaller values of `r2` with the optimal somewhere between $0$ and $0.2$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig2, ax2 = plt.subplots()\n",
    "colors = plt.rcParams['axes.prop_cycle'].by_key()['color'][:len(res[2])]\n",
    "\n",
    "ax2.plot(res[2], res[3], 'k', zorder=0)\n",
    "ax2.scatter(res[2], res[3], c=colors, zorder=1)\n",
    "\n",
    "ax2.set_xlabel('Keel radius, $r_2$ [m]')\n",
    "ax2.set_ylabel('Average Power [W]')\n",
    "ax2.set_title('Design optimization results')\n",
    "fig2.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "52432d6ee3f19a0e95d153c6ef95316a5902a04bd0ac4e408b2228923a5e25ec"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
